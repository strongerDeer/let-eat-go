// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  likes         Like[]
  comments      Comment[]
}

model Store{
  id        Int     @id @default(autoincrement())
  phone     String? // tel_no//전화번호
  storeType String? // cob_code_nm 업종 명 (식육즉석판매가공업, 식육판매업...)
  category  String? // bizcnd_code_nm 업태 명(마커용)
  name      String? // upso_nm 업소 명
  lng       String? // x_cnts 지도 Y좌표
  lat       String? // y_dnts 지도 X좌표
  address   String? // rdn_code_nm 도로명주소
  foodCertifyName String? // crtfc_gbn_nm 식품인증 구분명(우리동네 모범정육점, 채식가능음식점...)
  likes         Like[]
  comments      Comment[]
}


// npx prisma migrate dev --name init
// npx prisma studio
// npx prisma db seed


model Like{
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    storeId   Int
    userId    Int
    store     Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@index([userId, storeId])
}

model Comment{
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    storeId   Int
    userId    Int
    body      String
    store     Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@index([userId, storeId])
}


model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String 
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  refresh_token_expires_in  Int?  // 카카오로그인때문에 추가
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}